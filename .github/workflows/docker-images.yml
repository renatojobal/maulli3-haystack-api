name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ job.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.12

      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

      - name: Run tests
        id: test
        run: |
          . venv/bin/activate
          pytest
        continue-on-error: true

      - name: Set output if tests passed
        id: set-output
        run: echo "::set-output name=passed::true"
        if: success()

  build:
    needs: test
    if: needs.test.outputs.passed == 'true'
    runs-on: ubuntu-latest
    outputs:
      image_sha: ${{ steps.build.outputs.image_sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        id: build
        run: |
          docker build -t renatojobal/maulli3-api:latest .
          IMAGE_SHA=$(docker images -q renatojobal/maulli3-api:latest)
          echo "::set-output name=image_sha::$IMAGE_SHA"

      - name: Save Docker image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: |
            $(docker save renatojobal/maulli3-api:latest -o image.tar)
          if-no-files-found: error

  push-to-docker-hub:
    needs: build
    if: needs.test.outputs.passed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker push renatojobal/maulli3-api:latest

  push-to-digital-ocean:
    needs: build
    if: needs.test.outputs.passed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: |
          docker tag renatojobal/maulli3-api:latest ${{ secrets.REGISTRY_NAME }}/maulli3-app:$(echo $GITHUB_SHA | head -c7)
          docker push ${{ secrets.REGISTRY_NAME }}/maulli3-app:$(echo $GITHUB_SHA | head -c7)

      - name: Update deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/maulli3-app:'${TAG}'|' $GITHUB_WORKSPACE/k8s/deployment.yml

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/k8s/deployment.yml

      - name: Verify deployment
        run: kubectl rollout status deployment/maulli3-api
